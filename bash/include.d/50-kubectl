KUBECONFIG=${KUBECONFIG:-${HOME}/.kube/config}
for c in ${HOME}/.kube/rb-k8s-auth-pkg/*.yml; do
  echo ${KUBECONFIG} | tr ':' '\n' | grep -q $c || KUBECONFIG+=":$c"
done
export KUBECONFIG

_KUBECMD=$(command -v kubectl)
_kube_current_context() {
  ${_KUBECMD} config view -o json | jq -r '."current-context"'
}

_kube_current_namespace() {
  ${_KUBECMD} config view -o json \
    | jq -r ".contexts[] | select(.name==\"$(_kube_current_context)\") | .context.namespace" \
    | sed 's/^null$/default/'
}

_kube_show_context() {
  echo -e "$(_kube_current_context)\t$(_kube_current_namespace)"
}

kubecontext() {
  [[ $# -eq 1 ]] && ${_KUBECMD} config use-context $1 >&2
  _kube_show_context
}

kubenamespace() {
  [[ $# -eq 1 ]] && ${_KUBECMD} config set-context --current --namespace=$1 >&2
  _kube_show_context
}

__kubecontext() {
  options=$(echo -e "staging\nproduction")
  local IFS=$'\n'
  COMPREPLY=($(compgen -W "${options}" -- ${word}))
  if [ -n "$COMPREPLY" ]; then
      COMPREPLY=($(printf "%q\n" "${COMPREPLY[@]}"))
  fi
  return 0
}

__kubenamespace() {
  local kubecmd=$(command -v kubectl)
  options=$(${kubecmd} get namespaces | awk '(NR!=1) { print $1 }' | grep ^$2)
  local IFS=$'\n'
  COMPREPLY=($(compgen -W "${options}" -- ${word}))
  if [ -n "$COMPREPLY" ]; then
      COMPREPLY=($(printf "%q\n" "${COMPREPLY[@]}"))
  fi
  return 0
}

alias k="/$(command -v kubectl)"
alias kn="kubenamespace 2>/dev/null"
alias kc="kubecontext 2>/dev/null"

complete -F __kubecontext kubecontext
complete -F __kubenamespace kubenamespace
complete -F __kubecontext kc
complete -F __kubenamespace kn

source <(kubectl completion bash)
complete -o default -F __start_kubectl k

# vim: ft=sh
